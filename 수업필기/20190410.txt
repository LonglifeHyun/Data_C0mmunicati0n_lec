오전 10:34 2019-04-10

< 시험에 관한 공지 >
시험 시간 변경 --> 10시반 6409-1
PLMS, R언어, window 계산기 까지만 허용

4장이 비트 레벨의 에러에 대한 디텍션과 코렉션을 배웠지만,
ARQ는 패킷 레벨의 에러. loss임. 왔는데 잘못된 비트 레벨의 에러와는 명확히 구분해야함.

p6
ACK가 오지 않는것을 어떻게 아는가?
타임 아웃이면 오지않는다고 판단하고 재전송함.
타임아웃이 중요. 너무 길어도 문제, 짧아도 문제.
*길 때와 짧을 때의 특징 및 문제를 구분해서 설명할 줄 알아야 함.

비우다 와 비비다라는 보낼 데이터 있다고 하자
한 글자씩 보낼 때, 리시버는 비만 받아서는 둘중에 무슨 말을 보내는지 모름.
처음에 비를 받고 ACK를 보낸뒤 또 비가 왔을때 비비다의 두번째 비인지, 재전송된건지 알수가 없음.
그래서 두개가 같은건지 아닌건지 구분할 수 있게 해주는 구분자가 필요함.
이런 구분자를 sequence number라고 함.

데이터의 컨텐츠만 보고는 중복인지 아닌진 알 수 없음. 그래서 순서번호라는 추가 정보가 필요.
순서번호는 기본적으로 하나씩 증가함.

p7
이제 순서번호가 있기 때문에 중복인지 알 수 있음.
(A) 순서번호 덕에 중복임을 알 수 있음. 
	그러고 나면 ACK를 보내야하나? 보내야함. 안그러면 또 재전송될거니까.
(B) ACK를 제대로 보냈는데, timp out이 너무 짧아서 너무 늦게 도착함. 
	그래서 순서가 엇갈려서 1이 제대로 도착하지 않았는데 1에 대한 ACK로 오해해서 다음 데이터를 보냄 
	무엇에 관한 ACK인지 명확하지 않기 때문.
--> ACK에도 순서번호가 있어야 함.

ACK, T/O, Retransmission, SN, ASN --> 다섯가지 구성요소의 필요성에 대해 인지하고 설명할 수 있어야 함.

p8 
No error인 경우임. 근데 wait하고 있기 때문에 시간 및 자원이 낭비되고 있음.
RTT : Round Trip Time(왕복시간)
데이터를 보내기 시작해서 ACK가 오는데까지의 시간을 RTT라고 함.
RTT동안은 1개의 데이터를 보낼 수 있음. 
노에러인 상황에서 처리율은 1/RTT이라고 구체적인 값으로 말할 수있음.

그 RTT를 계산하기 위해 Network Delay라는 개념이 필요.

p9
보내고 싶은 물의 양은 100ton.
파이프 길이는 100km. 물이 파이프 끝까지 모두 가는 데 걸리는 시간?
55분 == 50분(100톤에 대한 커패시터) + 5시간(파이프 길이에 대해 물이 지나가는 시간)
? 나중에 다시확인.

transmission Delay
: 패킷의 모든 정보를 집어넣는데 걸리는 시간. 보내야 할 데이터와 양에 종속됨.
주로 링크의 커패서티는 bps로 표시됨.

propagation delay
: 목적지에 도착할때까지 걸리는 시간. 신호가 전달되는데 걸리는 시간.

이 두가지로 나누어 계산 해야함.

p10
9의 내용을 도식화한것.

propagation delay 처음에 도착하는데 걸리는 시간
+
Transmission delay 데이터의 양.
== RTT

다시, p8
Q1. RTT? 22ms == 2*( 10ms(Propagation delay) + 1ms(Transmission delay) )
따라서 22ms 동안에 1kBytes를 전송한 것임.(1/22) 
즉, 22초동안에 8Mbits를 전송한 것임.(8/22)
--> 원래는 8Mbps나 보낼수 있는데, 20분의 1밖에 못쓰는 꼴임. 비효율적.

그래서 이걸 개선하는 노력이 필요.

그전에 추가해야할 내용.
p11
하나 이상의 링크 즉, 스위치가 일어나는 것에 관한것.(스위치를 거침)

위와 아래의 방식이 다름.

1. 위_circuit 스위칭 : 데이터의 일부만 도착해도 바로 전송 가능
2. 아래_packet 스위칭 : 데이터가 모두 도착해야 전송가능.
	보통 라우터가 패킷을 다 받고 저장한다음에 분석해서(look up table) 다시 전송 --> (1)forward delay
	+) 멀티플렉싱할때 모든 input의 합이 멀티플렉서의 용량보다 큰 경우가 생기고,
	그때 (2)queueing delay가 발생
	근데 (2)큐잉 딜레이는 다이나믹하고 variable한 딜레이임. (1)은 fix delay임.

p12
마이크가 있을때, 마이크에 말하기 시작하면 바로 나오는가?
아님. 녹음시작하고 나서 패킷을 만든뒤 패킷에 목소리정보를 모은뒤에 전달을 함.
이 때, 이 패킷의 크기를 얼마나 해야하는지가 이슈가 됐었음.

delay의 차이를 delay jitter라고 하는데 이걸 해결하지 않고 재생하면 똑바로 재생이 안됨.
해결하는 동안 잠시 delay하는데 이 과정에 버퍼링이 발생.

이런 네트워크 딜레이를 이해하면 리얼타임 커뮤니케이션이 가능.
여전히 리얼타임은 중요한 이슈임.
리얼타임으로 딜레이가 최소화 되어야만 기계들을 높은 수준으로 제어를 할 수있음.

[SLIDING WINDOW PROTOOCL]
p15
stop and wait는 하나의 패킷에 대한 전송만을 허용 

그러나 이건, 여러개의 패킷전송을 허용.
센더가 ACK없이 최대 W까지 frame까지 보낼 수 있음.
여기서 W는 윈도우 사이즈.
윈도우 사이즈와 관련된 변수를 유지, 관리할 것임.

근데 그림을 보면
0번 데이터에 대한 AckN이 1임. Cumulative ACK. 
즉, 0번까지는 제대로 받았어. 이제 나는 1이 필요해 라는 말임.

최초의 윈도우 사이즈가 3이라고 하면 최초의 에크날리지넘버가 3이라는 말.
윈도우 사이즈는 3에서 하나씩 감소하다가 0이 되는 순간에는 더이상 데이터 전송을 할 수가 없음.
0이 된 W는 ACK를 받으면 다시 증가
근데 ACK넘에 따라 결과가 달라짐
1이 돌아오면 아직 보낼 수 있는 데이터가 남음. 즉, W!=0이므로 남은 보낼수있는 데이터만큼만 보냄.

p16
붉은색은 보낼 수 있다는 의미. 
윈도우라고하면 옆으로 슬라이딩이 됨. 
8이전송되면 W=2로 증가하고 2만큼 윈도우가 슬라이딩 됨

p17
슬라이딩 윈도우 프로토콜의 에러가 없는 최대 성능
처리율은 W/RTT에 비례.
그래서 앞에서 한건 W==1일때의 특별한 경우라고 볼 수 있음.

통신에서 RTT는 그냥 결정될 뿐, 제어의 대상이 아님. 
우리가 컨트롤 할 수있는 값은 W뿐. 
W값에 따라 처리율과 스피드가 조정이 됨.

아까같은 상황에서 22로하면 22/22로 100퍼센트 효율을 냄.

p20
ACK종류.
무엇을 받을때마다 제대로 받았으면 긍정의 Positive ACK
제대로 받았는데도 보내지 않음. 그러다가 제대로 못받으면 알려줌. Negative ACK

어느 것이 더 좋을까?
의견1. Feedback역시 의미있는 데이터를 보내는게 아닌 오버헤드이므로 가능한 한 적은 것이 좋음.
따라서 네거티브 액이 좋다는 말임

의견2. 네거티브액이 소실되었을경우? 복구가 훨씬 힘듦.

결론은 상황에 따라 다르지만, positive ack이 훨씬 많이 쓰임.

와이파이에서 위로 화살표가 깜빡이는건 우리가 똑바로 데이터 수신을 하고 있다고 ACK을 보내는 것임.

***p21
Cumulative ACK / Selective ACK

2번 ACK이 소실 되더라도 3이 제대로 가면 2가 제대로 왔음을 내포하고 있으니, 2를 다시 보낼 필요가 없음.
그래서 ACK보냄에 있어서 비교적 강인할 수있음.
**시험 나온다 ACK 숫자 채우는 문제!

4를 못받았으니까 가는 ACK는 4. 5를 받아도 4, 6을 받아도 4.
그러다가 재전송된 4를 받게되면 6까지 받은건 제대로 받았으니까 다음에 보낼 ACK은 7.

근데 5,6이 제대로 받은걸 확인시켜줄 수가 없음. --> Selective ACK

어는게 더 좋은가?
절대적인건 없지만 메세지 부하가 보다 복잡하고 크기 때문에 cumulative ACK이 더 좋음.

default로 쓰이는 건 cumulative , positive ACK이 쓰임.





