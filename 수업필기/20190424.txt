오전 10:32 2019-04-24

6장 시작.

1장에선 레이어에 관해 배움
2~5장에선 3M을 배웠고, Error에 관해서도 얘기했음. 또한 ARQ, Flow Control로 속도제어. 
자원을 공유하고 제어하고, 속도를 다루는 것에 대해 배움

이제 layer3에 대해 배우고 다시 레이어1에 대해 배울 것임

[Switching]
p3
왜 이렇게 중간자를 거쳐서 통신을 하는가?

어떤 길을 찾을 것인가? 
그전에, 길을 어떻게 닦을 것인가? 하는 교환기술에 대해 먼저 배울 것임.
Circuit Switching 	// 가장 먼저 나옴
Packet Swtiching	
+) virtual packet switching	// 위 두개의 하이브리드
--> 이것들은 데통에서 가장 중요한 거라고 말할 수 있음

이 세가지에 대해 배울건데,

슬라이드 왔다갔다할 것임
p4
비교

p8
circuit을 미리 만들어두고 보내는 게 ciruit switching
반면, 미리 서킷을 만들어두지 않고 패킷을 먼저 내보낸 뒤에 상황에 따라 길을 찾아가게 하는게 패킷 스위칭

즉, 전용의 path가 있는데 서킷 스위칭, 없는 게  패킷스위칭

서킷 스위칭은 전용의 패쓰를 셋업 하는 과정이 필요함.

p6

서킷스위칭의 대표적인 예가 전화임. 
전화번호 누르고 신호가 가길 기다림. 대상까지 패쓰가 만들어지길 기다림.
--> call up delay(p4)

근데 패킷 스위칭은 없음

서킷 스위칭은 상대가 살아있어야 데이터를 보낼 수 있음
패킷 스위칭은 상대가 죽어있어도 데이터를 보낼 수 있음.

p6의 그림에 주목을 해보면
(1) 서킷 스위칭
(2) 버츄얼 패킷 스위칭 
(3) 패킷 스위칭

(1) (3)의 차이는 콜 업이 있냐 없냐임 (1)의 상단에 있는거

p
유저 데이터를 추가해서 추가된 정보를 주어야 하는게 패킷임.
유저 데이터에 목적지 주소와 같은 컨트롤 정보가 있는데 패킷 스위칭임.

(3)에서 패킷을 받으면 딜레이 되는거 패킷을 저장했다가 전달하는 딜레이
: store & forward delay 
왜 이렇게 delay하는가?
데이터를 다 받아야만 처리할 수있으니까.

그에 반해 서킷은 그냥 데이터가 들어오면 서킷을 따라서 내보내줌

아 집중이 너무 안된다 오늘.
녹음 듣자 

서킷은 신호가 도착하자마자 물리 스위치에 의해서 쭉 나갈수 있음.
근데 패킷은 스토어 앤 포워드 하는데 시간이 걸림

예를 들어 물을 보낸다고 해보자
서킷 스위치는 물을 보낼 파이프를 먼저 만들고 그냥 그 파이에 물을 부으면 됨.
근데 패킷 스위치는 물병이 있는거야. 물병에 물을 담아. 다 담고 나면 걔를 트럭에 실어 보냄.

p4
비교
서킷 스위칭은 
싱크로스 TDM이랑 비슷
순수 데이터만 보내면 됨
고정된 fixed bandswitch. 장점 : 할당 받았을때 안정적으로 감. 단점 : 데이터가 없다면 자원 낭비.
call blocking : resource가 없어서 전화를 할 수 없는 거


패킷 스위칭
A싱크로스 TDM이랑 비슷
순수 데이터 앞에 추가 정보를 붙여줘야함
D Bandwith 장점 : 자원 낭비 안됨 단점 : 불안정함(이유는 못들음)
call blocking은 없음. 무조건 데이터를 내보내기 때문에 받아들여지지 않는 경우는 없음.
근데 아까 이야기 한 것처럼, 
A싱크로스 TDM처럼 많은 데이터가 들어오면 오버되는 데이터는 큐에 들어가는데 그마저 넘치면 패킷 로스
이와 비슷하게 결국 패킷 로스됨

이 다섯가지 비교에 대해 잘 이해하고 설명 할 수있으면 됨.

p5
스위칭 기술을 비교할 때, 항상 기준을 가지고 비교하는 아.. 집중좀 해라

5의 질문에 다 대답해야지

p7

p3
자, 세개가 있다고 했는데 서킷이랑 패킷을 섞어놓은게 세번째 것임.
서킷은 안정적임
패킷은 리소스 면에서 효율적. 
이 두가지의 장점을 결합하는 것이 virtual circuit packet switching임.

p4
virtual circuit packet switching
양측의 장점을 결합하려는 시도로 만들어짐.
즉, 사용자의 요구에 따라 전용의 패쓰를 할당할 수도 있고, 그렇지 않도록 할 수 있게함. 
전용의 패쓰는 아니지만 전용의 루트가 만들어짐.

p8
virtual circuit을 활용함.
따라 가는 루트만 할당 되어있을 뿐이지, 리소스 자원까지 할당된다는 말이 아님.
모든 트래픽이 하나의 경로를 따라갈 수있음
하나의 길을 따라가면 중간의 스위치들은? 미리 지정된 패킷에 대해 컨트롤 할 수 있다는 말임.

다시 녹음 듣자.

암튼 뭐 이렇게 하면 전용의 자원을 할당하진 않았지만 마친 그런 효과를 볼 수 있음.
Qos : 등급을 다르게 한다는 서비스 품질의 개념.
	단, 모두가 vip대접을 받는게 아님

인터넷은 기본적으로 만인에게 동등함.
근데 Qos가 들어가면 품질을 달리 대우 하는 것이 가능함.
그게 발전이냐 아니냐는 다른관점임.

암튼, 서킷과 패킷의 특성을 내가 선택할 수 있게 하는 것이 버츄얼임.
선택에 따라 달라질 수 있음.

서킷은 하드웨어상에서의 단순한 스위칭임. 
패킷은 컴퓨터상에서 해석을 해야함.
버츄얼은 컴퓨터.

기술의 발전과 연결해볼 것(패킷 -> 서킷 -> 버츄얼)

p9
기준이 fairness 공정함.
참고로 Round Robin 방식으로 서버가 제공하고있음.
(A)과 (B)의 차이?
(A)는 패킷블럭이 다다름
(B) 긴 패킷 블럭을 다 잘라서 작게 만들어서 일정하게 여러 패킷이 돌아가면서 처리되도록함.
그니까 (B)가 더 공정하다고 볼 수있다는 거지

p10
이제 파이프라이닝 관점에서 얘기 해보자.
RISC chip, CISC chip(컴퓨터 구조에서 배움)
이 중에서 ARM에서 주로 쓰이는 RISC방식은 파이프라이닝을 사용함. (Reduce Instruction)

지금 파이프라이닝 설명중이심(RISC에서는 모든 과정의 클럭주기?라고 해야하나 암튼 그걸 다 맞춰놓음)

데이터를 쪼개지 않고 그냥 보내면 store and forward delay가 일어남(맨 왼쪽 그림)
데이터를 쪼개서 파이프라이닝을 하게 되면 시간이 훨씬 적게 걸림.

그래서 위의 두가지 관점에서보면 패킷 사이즌 작은게 좋음

그럼 패킷이 무조건 작은게 좋으냐?
놉 너무 작으면 헤더때문에 오히려 더 낭비
그러니까 적절히 유지하는게 중요

p11
키워드만 소개함. Software defined networking.
구조 그림(스택 구조)을 많이 그리는데






















